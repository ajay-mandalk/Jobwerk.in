---
import Container from "../../shared/Container.astro";
import Announcer from "@/components/annoucement/Announcer.astro";
import Link from "../ui/Link.astro";
import Dropdown from "./DropDown.astro";
import { Astronav, MenuItems, MenuIcon } from "astro-navbar";
import type { MenuItem } from "@/types/navbar";


const menuitems: MenuItem[] = [
  {
    title: "Home",
    path: "/",
  },
  {
    title: "Support",
    path: "/support",
  },
  {
    title: "About Jobwerk",
    path: "/about",
  },
  {
    title: "Molding Consultation",
    badge: true,
    path: "/",
  },
  {
    title: "Blog",
    path: "/blog",
  }
];
---

<Announcer />
<Container>
  <header class="flex flex-col lg:flex-row justify-between items-center my-2">
    <Astronav>
      <div class="flex w-full lg:w-auto items-center justify-between">
        <a href="/" class="flex items-center text-lg">
          <img src="/logo/jobwerk-dark.svg" alt="JobWerk Logo" class="hidden dark:block w-35 h-95 mr-2" />
          <img src="/logo/jobwerk-light.svg" alt="JobWerk Logo" class="block dark:hidden w-35 h-95 mr-2" />
        </a>
        <div class="flex items-center gap-2 lg:hidden">
          <button 
            data-switch-theme 
            class="theme-toggle-btn text-gray-800 dark:text-gray-200"
            aria-label="Toggle theme"
          >
            <svg class="w-6 h-6 dark:hidden" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"/>
            </svg>
            <svg class="w-6 h-6 hidden dark:block" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"/>
            </svg>
          </button>
          <MenuIcon class="w-6 h-6 text-gray-800 dark:text-white" />
        </div>
      </div>
      <MenuItems class="hidden w-full lg:w-auto mt-2 lg:flex lg:mt-0 ">
        <ul class="flex flex-col lg:flex-row lg:gap-3 dark:text-white">
          {menuitems.map((item, index) => (
            <li id={item.title}>
              {item.children ? (
                <Dropdown
                  title={item.title}
                  children={item.children}
                  lastItem={index === menuitems.length - 1}
                />
              ) : (
                <a
                  href={item.path}
                  class="flex lg:px-3 py-2 items-center dark:text-white text-gray-600 hover:text-gray-900"
                >
                  <span>{item.title}</span>
                  {item.badge && (
                    <span class="ml-1 px-2 py-0.5 text-[10px] animate-pulse font-semibold uppercase text-white bg-blue-600 rounded-full">
                      Free
                    </span>
                  )}
                </a>
              )}
            </li>
          ))}
        </ul>
        <div class="lg:hidden flex items-center mt-3 gap-4 dark:text-gray-500">
          <Link href="/become-partner" style="muted" block size="md">Become a Partner</Link>
          <Link href="/BecomePartnerForm" size="md" block>Get a Quote</Link>
        </div>
      </MenuItems>
      <div class="hidden lg:flex items-center gap-4">
        <Link href="/BecomePartnerForm" size="md">Get a Quote</Link>
        <Link href="/become-partner" size="md">Become a Partner</Link>
      </div>
    </Astronav>
  </header>
</Container>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const themeToggleBtn = document.querySelector('[data-switch-theme]');
    const htmlElement = document.documentElement;

    // Get the current theme from localStorage
    const currentTheme = localStorage.getItem('theme');

    // Set the initial theme based on localStorage or system preference
    if (currentTheme === 'dark') {
      htmlElement.classList.add('dark');
    } else if (currentTheme === 'light') {
      htmlElement.classList.remove('dark');
    } else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      // Default to dark mode if system preference is dark
      htmlElement.classList.add('dark');
      localStorage.setItem('theme', 'dark');
    } else {
      // Default to light mode
      htmlElement.classList.remove('dark');
      localStorage.setItem('theme', 'light');
    }

    // Toggle theme on button click
    if (themeToggleBtn) {
      themeToggleBtn.addEventListener('click', () => {
        const isDark = htmlElement.classList.contains('dark');
        if (isDark) {
          htmlElement.classList.remove('dark');
          localStorage.setItem('theme', 'light');
        } else {
          htmlElement.classList.add('dark');
          localStorage.setItem('theme', 'dark');
        }
      });
    }
  });
</script>