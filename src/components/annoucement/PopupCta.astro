---
import DOMPurify from 'dompurify';

let sanitizedTitle = "this Project is Under Heavy Devlopment by Jobwerkâ„¢";
let sanitizedBadge = "Coming Soon";
let sanitizedDescription = "Streamline your procurement process and secure competitive quotes for your injection molding needs";
let sanitizedButtonText = "Quote & Source Parts";
let sanitizedButtonLink = "/DiscoverJobwerk";

if (!import.meta.env.SSR) {
  sanitizedTitle = DOMPurify.sanitize(sanitizedTitle);
  sanitizedBadge = DOMPurify.sanitize(sanitizedBadge);
  sanitizedDescription = DOMPurify.sanitize(sanitizedDescription);
  sanitizedButtonText = DOMPurify.sanitize(sanitizedButtonText);
  sanitizedButtonLink = DOMPurify.sanitize(sanitizedButtonLink);
}

const ctaContent = {
  isActive: true,
  title: sanitizedTitle,
  badge: sanitizedBadge,
  description: sanitizedDescription,
  buttonText: sanitizedButtonText,
  buttonLink: sanitizedButtonLink,
};
---



{ctaContent.isActive && (
  <div
    id="ctaPopup"
    class="fixed inset-0 bg-black/30 backdrop-blur-sm z-50 items-center justify-center p-2 sm:p-4 md:p-8 overflow-y-auto hidden"
  >
    <div class="w-full max-w-lg mx-auto sm:max-w-2xl lg:max-w-3xl bg-[#2e054e] rounded-xl shadow-md"> 
      <div class="relative p-6"> {/* Added padding */}
        <button
          type="button"
          id="closePopup"
          class="absolute top-4 right-4 rounded-full p-2 text-gray-300 hover:text-gray-400 focus:outline-none"
        >
          <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>

        <div class="flex flex-col items-center text-center">
          <span class="inline-flex items-center gap-1.5 py-1.5 px-3 mb-4 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
            {ctaContent.badge}
          </span>

          <h2 class="mb-4 text-xl sm:text-2xl md:text-3xl font-bold tracking-tight text-gray-100">
            {ctaContent.title}
          </h2>

          <p class="mb-6 text-gray-100 text-base md:text-lg max-w-prose text-center">
            {ctaContent.description}
          </p>

          <a
            href={ctaContent.buttonLink}
            class="inline-flex items-center justify-center gap-x-2 text-base font-semibold text-white hover:text-gray-950 bg-blue-600 hover:bg-gray-200 rounded-lg py-3 px-6 transition-colors duration-200"
          >
            {ctaContent.buttonText}
            <svg
              class="h-5 w-5 animate-bounce-x"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </a>
        </div>
      </div>
    </div>
  </div>
)}

<style>
  @keyframes bounce-x {
    0%, 100% {
      transform: translateX(0);
    }
    50% {
      transform: translateX(2px);
    }
  }
  .animate-bounce-x {
    animation: bounce-x 1s infinite;
  }
</style>

<script>
  const POPUP_SHOWN_KEY = 'popup_shown_date';
const POPUP_CLOSE_COUNT_KEY = 'popup_close_count';
const POPUP_INTERVALS = [5, 30, 60]; // 

function getNextDelay() {
  const closeCount = parseInt(localStorage.getItem(POPUP_CLOSE_COUNT_KEY) || '0', 10);
  return POPUP_INTERVALS[closeCount] * 1000; // Convert to milliseconds
}

function shouldShowPopup() {
  const lastShown = localStorage.getItem(POPUP_SHOWN_KEY);
  if (!lastShown) return true;

  const now = Date.now();
  const lastShownTime = new Date(lastShown).getTime();
  const elapsedSeconds = (now - lastShownTime) / 1000;

  const closeCount = parseInt(localStorage.getItem(POPUP_CLOSE_COUNT_KEY) || '0', 10);
  const nextInterval = POPUP_INTERVALS[closeCount] || POPUP_INTERVALS[POPUP_INTERVALS.length - 1];

  return elapsedSeconds >= nextInterval;
}

function initPopup() {
  const popup = document.getElementById('ctaPopup');
  const closeButton = document.getElementById('closePopup');

  if (!popup || !closeButton) return;

  function closePopup() {
    if (popup) {
      popup.classList.add('hidden');

      // Increment the close count
      const closeCount = parseInt(localStorage.getItem(POPUP_CLOSE_COUNT_KEY) || '0', 10);
      localStorage.setItem(POPUP_CLOSE_COUNT_KEY, (closeCount + 1).toString());

      // Set the last shown time
      localStorage.setItem(POPUP_SHOWN_KEY, new Date().toISOString());
    }
  }

  // Close on button click
  closeButton.addEventListener('click', closePopup);

  // Close on outside click
  popup.addEventListener('click', (e) => {
    if (e.target === popup) {
      closePopup();
    }
  });

  // Close on Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closePopup();
    }
  });

  // Show popup logic
  if (shouldShowPopup()) {
    setTimeout(() => {
      popup.classList.remove('hidden');
      localStorage.setItem(POPUP_SHOWN_KEY, new Date().toISOString());
    }, getNextDelay());
  }
}

// Initialize popup when DOM is ready
document.addEventListener('DOMContentLoaded', initPopup);
</script>


