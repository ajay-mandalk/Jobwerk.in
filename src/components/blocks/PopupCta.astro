---
const ctaContent = {
  isActive: true,
  title: "Get Best Quote with Jobwerkâ„¢",
  badge: "Limited Time",
  description: "Streamline your procurement process and secure competitive quotes for your injection molding needs",
  buttonText: "Quote & Source Parts",
  buttonLink: "/DiscoverJobwerk"
};

---

{ctaContent.isActive && (
  <div
    id="ctaPopup"
    class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50  items-center justify-center p-2 sm:p-4 md:p-8 overflow-y-auto hidden">
    <div class="w-full max-w-lg mx-auto sm:max-w-2xl lg:max-w-4xl">
      <div class="relative overflow-hidden rounded-xl  bg-gradient-to-r from-blue-800 via-blue-700 to-blue-800">
        <!-- Background Pattern -->
        <div class="absolute inset-0 opacity-10">
          <svg class="h-full w-full" viewBox="0 0 80 80" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M0 0h80v80H0z" fill="url(#pattern)" />
            <defs>
              <pattern id="pattern" patternUnits="userSpaceOnUse" width="10" height="10">
                <rect width="10" height="10" fill="currentColor" />
              </pattern>
            </defs>
          </svg>
        </div>

        <!-- Content Container -->
        <div class="relative px-4 py-8 sm:px-6 sm:py-12 md:px-12 md:py-16">
          <div class="flex flex-col items-center text-center">
            <!-- Badge -->
            <span class="inline-flex items-center gap-1.5 py-1.5 px-3 rounded-full text-xs font-medium bg-white text-blue-900">
              {ctaContent.badge}
              <span class="flex size-2">
                <span class="animate-ping absolute inline-flex h-2 w-2 rounded-full bg-blue-500 opacity-75"></span>
                <span class="relative inline-flex rounded-full h-2 w-2 bg-blue-600"></span>
              </span>
            </span>

            <!-- Title -->
            <h2 class="mt-4 text-white text-xl sm:text-2xl md:text-3xl lg:text-4xl font-bold tracking-tight">
              {ctaContent.title}
            </h2>

            <!-- Description -->
            <p class="mt-4 text-slate-200 text-sm sm:text-base md:text-lg max-w-prose">
              {ctaContent.description}
            </p>

            <!-- CTA Button -->
            <div class="mt-6 sm:mt-8">
              <a
                href={ctaContent.buttonLink}
                class="inline-flex items-center gap-x-2 text-sm sm:text-base font-semibold text-blue-900 bg-white hover:bg-blue-50 rounded-lg py-2.5 px-4 sm:py-3 sm:px-6 transition-colors duration-200"
              >
                {ctaContent.buttonText}
                <svg
                  class="size-4 sm:size-5 animate-bounce-x"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9 5l7 7-7 7"
                  />
                </svg>
              </a>
            </div>

            <!-- Close Button -->
            <button
              type="button"
              id="closePopup"
              class="absolute end-2 top-2 sm:end-4 sm:top-4 rounded-full p-1.5 text-white/80 hover:text-white hover:bg-white/20 transition-colors duration-200"
            >
              <span class="sr-only">Close</span>
              <svg class="size-4 sm:size-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
)}

<style>
  @keyframes bounce-x {
    0%, 100% {
      transform: translateX(0);
    }
    50% {
      transform: translateX(25%);
    }
  }
  .animate-bounce-x {
    animation: bounce-x 1s infinite;
  }
</style>

<script>
   const POPUP_SHOWN_KEY = 'popup_shown_date';
const POPUP_INTERVALS = [10, 20, 20, 10]; // 10 seconds, 20 seconds, 5 minutes, 1 day in seconds

function getNextDelay() {
  const lastShown = localStorage.getItem(POPUP_SHOWN_KEY);
  if (!lastShown) return POPUP_INTERVALS[0] * 1000;

  const now = Date.now();
  const lastShownTime = new Date(lastShown).getTime();
  const elapsedSeconds = (now - lastShownTime) / 1000;

  for (const interval of POPUP_INTERVALS) {
    if (elapsedSeconds < interval) {
      return (interval - elapsedSeconds) * 1000;
    }
  }

  return POPUP_INTERVALS[POPUP_INTERVALS.length - 1] * 1000;
}

function shouldShowPopup() {
  const lastShown = localStorage.getItem(POPUP_SHOWN_KEY);
  if (!lastShown) return true;

  const now = Date.now();
  const lastShownTime = new Date(lastShown).getTime();
  return (now - lastShownTime) / 1000 >= getNextDelay() / 1000;
}

function initPopup() {
  const popup = document.getElementById('ctaPopup');
  const closeButton = document.getElementById('closePopup');

  if (!popup || !closeButton) return;

  function closePopup() {
    if (popup) {
      popup.classList.add('hidden');
    }
  }

  // Close on button click
  closeButton.addEventListener('click', closePopup);

  // Close on outside click
  popup.addEventListener('click', (e) => {
    if (e.target === popup) {
      closePopup();
    }
  });

  // Close on Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closePopup();
    }
  });

  // Show popup logic
  if (shouldShowPopup()) {
    setTimeout(() => {
      popup.classList.remove('hidden');
      localStorage.setItem(POPUP_SHOWN_KEY, new Date().toISOString());
    }, getNextDelay());
  }
}

// Initialize popup when DOM is ready
document.addEventListener('DOMContentLoaded', initPopup);
</script>


